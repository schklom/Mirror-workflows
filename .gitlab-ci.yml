# Based on this template:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Go.gitlab-ci.yml

image: golang:latest

variables:
  # Please edit to your GitLab project
  REPO_NAME: gitlab.com/Nulide/findmydeviceserver
  # https://docs.gitlab.com/ee/user/packages/container_registry/build_and_push_images.html#container-registry-examples-with-gitlab-cicd
  # https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#docker-in-docker-with-tls-enabled-in-the-docker-executor
  DOCKER_TLS_CERT_DIR: "/certs"

# The problem is that to be able to use go get, one needs to put
# the repository in the $GOPATH. So for example if your gitlab domain
# is gitlab.com, and that your repository is namespace/project, and
# the default GOPATH being /go, then you'd need to have your
# repository in /go/src/gitlab.com/namespace/project
# Thus, making a symbolic link corrects this.
before_script:
  - mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
  - ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
  - cd $GOPATH/src/$REPO_NAME
  - go mod tidy
  - wget https://raw.githubusercontent.com/objectbox/objectbox-go/main/install.sh
  - chmod +x install.sh
  - (yes | ./install.sh ;) || exit_code=$?
  # Fix "cmd/fmdserver.go:19:2: no required module provides package gopkg.in/yaml.v3; to add it:" (only an issue in CI...)
  - go get gopkg.in/yaml.v3


stages:
  - test
  - build
  - deploy

format:
  stage: test
  script:
    - go fmt $(go list ./... | grep -v /vendor/)
    - go vet $(go list ./... | grep -v /vendor/)
    - go test -race $(go list ./... | grep -v /vendor/)

compile:
  stage: build
  script:
    - go build -o fmdserver cmd/fmdserver.go
  artifacts:
    paths:
      - fmdserver

docker-build:
  image: docker:latest
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - tags=""
    # docker tag for branch
    - |
      if [[ "$CI_COMMIT_BRANCH" != "" ]]; then
        tags="$tags --tag $CI_REGISTRY_IMAGE:${CI_COMMIT_BRANCH}"
      fi
    # docker tag for git tags
    - |
      if [[ "$CI_COMMIT_TAG" != "" ]]; then
        tags="$tags --tag $CI_REGISTRY_IMAGE:${CI_COMMIT_TAG}"
        tags="$tags --tag $CI_REGISTRY_IMAGE:latest"
        echo "Piepline is a release"
      fi
    - |
      if [[ "$tags" == "" ]] || [[ "$CI_PIPELINE_SOURCE" == "$merge_request_event" ]] || [[ "$CI_PIPELINE_SOURCE" == "$external_pull_request_event" ]]; then
        push=""
        echo "Image will not be pushed. Pipeline is a merge request or tags are empty."
      else
        push="--push"
        echo "Image will be pushed."
      fi
    # Build the images
    # buildx multiplatform build sometimes fails in Gitlab CI: https://github.com/docker/buildx/issues/584
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes; docker buildx create --use
    # Issue: "invalid tag missing manifest digest" in Container Registry after buildx pushed it.
    # Issue: https://gitlab.com/gitlab-org/gitlab/-/issues/393202
    # Workaround: https://gitlab.com/gitlab-org/gitlab/-/issues/388865
    - docker buildx build --pull ${push} --provenance=false --platform linux/amd64,linux/arm/v7,linux/arm64/v8 $tags .
  retry: 2
  rules:
    - exists:
        - Dockerfile
      # Only run this job on tagging a release. This is to save pipeline minutes.
      # This step takes ~40 mins, thus quickly eating up pipeline minutes.
      if: $CI_COMMIT_TAG =~ /^v?[0-9\.]+$/
