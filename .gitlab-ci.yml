# Based on this template:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Go.gitlab-ci.yml

image: golang:latest

variables:
  # https://docs.gitlab.com/ee/user/packages/container_registry/build_and_push_images.html#container-registry-examples-with-gitlab-cicd
  # https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#docker-in-docker-with-tls-enabled-in-the-docker-executor
  DOCKER_TLS_CERT_DIR: "/certs"
  # SonarQube
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
  GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task

# https://docs.gitlab.com/ci/yaml/yaml_optimization/#yaml-anchors-for-scripts
.go-setup: &go-setup
  # Fix "cmd/fmdserver.go:19:2: no required module provides package gopkg.in/yaml.v3; to add it:" (only an issue in CI...)
  - go get gopkg.in/yaml.v3

stages:
  - test
  - build

format:
  stage: test
  script:
    - *go-setup
    - go mod tidy
    - go fmt $(go list ./... | grep -v /vendor/)
    - go vet $(go list ./... | grep -v /vendor/)

unit-test:
  stage: test
  script:
    - *go-setup
    - go test -race $(go list ./... | grep -v /vendor/)\

nil-safety:
  stage: test
  script:
    - *go-setup
    - go install go.uber.org/nilaway/cmd/nilaway@latest
    - nilaway -include-pkgs="fmd-server" ./...

sonarcloud-check:
  stage: test
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

compile:
  stage: build
  script:
    - *go-setup
    - go build -o fmdserver
  artifacts:
    paths:
      - fmdserver

docker-build:
  image: docker:latest
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - tags=""
    # docker tag for branch
    - |
      if [[ "$CI_COMMIT_BRANCH" != "" ]]; then
        tags="$tags --tag $CI_REGISTRY_IMAGE:${CI_COMMIT_BRANCH}"
      fi
    # docker tag for git tags
    - |
      if [[ "$CI_COMMIT_TAG" != "" ]]; then
        tags="$tags --tag $CI_REGISTRY_IMAGE:${CI_COMMIT_TAG}"
        tags="$tags --tag $CI_REGISTRY_IMAGE:latest"
        echo "Piepline is a release"
      fi
    - |
      if [[ "$tags" == "" ]] || [[ "$CI_PIPELINE_SOURCE" == "$merge_request_event" ]] || [[ "$CI_PIPELINE_SOURCE" == "$external_pull_request_event" ]]; then
        push=""
        echo "Image will not be pushed. Pipeline is a merge request or tags are empty."
      else
        push="--push"
        echo "Image will be pushed."
      fi
    # Build the images
    # buildx multiplatform build sometimes fails in Gitlab CI: https://github.com/docker/buildx/issues/584
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes; docker buildx create --use
    - docker buildx build --pull ${push} --platform linux/amd64,linux/arm/v7,linux/arm64/v8 $tags .
  retry: 2
  rules:
    - exists:
        - Dockerfile
      # Only run this job on tagging a release. This is to save pipeline minutes.
      # This step takes ~40 mins, thus quickly eating up pipeline minutes.
      if: $CI_COMMIT_TAG =~ /^v?[0-9\.]+$/
