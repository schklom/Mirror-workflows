# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Go.gitlab-ci.yml

image: golang:latest

variables:
  # Please edit to your GitLab project
  REPO_NAME: gitlab.com/Nulide/findmydeviceserver

# The problem is that to be able to use go get, one needs to put
# the repository in the $GOPATH. So for example if your gitlab domain
# is gitlab.com, and that your repository is namespace/project, and
# the default GOPATH being /go, then you'd need to have your
# repository in /go/src/gitlab.com/namespace/project
# Thus, making a symbolic link corrects this.
before_script:
  - mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
  - ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
  - cd $GOPATH/src/$REPO_NAME
  - go mod tidy
  - wget https://raw.githubusercontent.com/objectbox/objectbox-go/main/install.sh
  - chmod +x install.sh
  - (yes | ./install.sh ;) || exit_code=$?

stages:
  - test
  - build
  - deploy

format:
  stage: test
  script:
    - go fmt $(go list ./... | grep -v /vendor/)
    - go vet $(go list ./... | grep -v /vendor/)
    - go test -race $(go list ./... | grep -v /vendor/)

compile:
  stage: build
  script:
    - cd cmd
    - go build fmdserver.go
  artifacts:
    paths:
      - fmdserver

docker-build:
  image: registry.gitlab.com/luckyturtledev/docker-with-buildx:latest
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    # docker tag for branch
    - tags=""
    - |
      if [[ "$CI_COMMIT_BRANCH" != "" ]]; then
        tags+=" --tag $CI_REGISTRY_IMAGE:${CI_COMMIT_BRANCH}"
      fi
    # docker tag for git tag
    - |
      if [[ "$CI_COMMIT_TAG" != "" ]]; then
        tags+=" --tag $CI_REGISTRY_IMAGE:${CI_COMMIT_TAG}"
        tags+=" --tag $CI_REGISTRY_IMAGE:latest"
        echo "Piepline is a release"
      fi
    - |
      if [[ "$tags" == "" ]] || [[ "$CI_PIPELINE_SOURCE" == "$merge_request_event" ]] || [[ "$CI_PIPELINE_SOURCE" == "$external_pull_request_event" ]]; then
        push=""
        echo "Image will not be pushed. Piepline is a merge request or tags are empty"
      else
        push="--push"
        echo "Image will be pushed."
      fi
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes; docker buildx create ${config} --use
    - docker buildx build ${push} --platform linux/amd64,linux/arm/v5,linux/arm/v7,linux/arm64/v8 $tags .
  # buildx multiplatform build does fail sometimes at gitlab-ci. see https://github.com/docker/buildx/issues/584
  retry: 2
  rules:
    - exists:
        - Dockerfile
